# ############## configuration_H2_file.properties #########################
# ENCODE EN UTF-8.
# Fichier properties INTERNE devant être inclus dans le classpath.
# Contient les paramètres de connexion à la BASE POSTGRESQL du projet.
# en MODE FILE

# ===============================
# BASE DE DONNEES DE TEST H2
# ===============================
# permet de définir un schema-${platform}.sql pour la création du schéma et un data-${platform}.sql pour l'alimentation des tables
# ATTENTION mettre spring.jpa.hibernate.ddl-auto=none si on veut utiliser la création du schéma et l'initialisation des tables avec schema.sql et data.sql
#spring.datasource.platform=h2
### Enable H2 Console Access 
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console


# ********************************************
# NOM DE L'UNITE DE PERSISTENCE
javax.persistence.jdbc.persistence-unit.name = persistence_unit_base-traficweb_v1

# TYPE DE TRANSACTION (RESOURCE-LOCAL pour Standalone, JTA pour TOMCAT, rien pour SPRING)
javax.persistence.jdbc.persistence-unit.transaction-type = RESOURCE_LOCAL
#javax.persistence.jdbc.persistence-unit.transaction-type = JTA
#javax.persistence.jdbc.persistence-unit.transaction-type = 


# ********************************************
# DATASOURCE
# ********************************************
# URL de connexion à la base POSTGRESQL en MODE SERVEUR
javax.persistence.jdbc.connexion.url=jdbc:postgresql://localhost:5432/base-traficweb_v1


# *******************
# DRIVER de la base
javax.persistence.jdbc.driver=org.postgresql.Driver

# *******************
# LOGIN + MOT DE PASSE
javax.persistence.jdbc.connection.username=postgres
javax.persistence.jdbc.connection.password=postgres


# ===============================
# JPA / HIBERNATE
# ===============================

# *******************
# Dialecte Hibernate
# POSTGRESQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL9Dialect



#spring.datasource.initialization-mode=embedded

#VOIR LE SQL GENERE PAR HIBERNATE
spring.jpa.properties.hibernate.show_sql=false
#spring.jpa.properties.hibernate.show_sql=true

#FORMATER LE SQL GENERE PAR HIBERNATE
#spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.format_sql=true

#COMMENTER LE SQL GENERE PAR HIBERNATE
#spring.jpa.properties.hibernate.use_sql_comments=false
spring.jpa.properties.hibernate.use_sql_comments=true

#GENERATION DES STATISTIQUES HIBERNATE
spring.jpa.properties.hibernate.generate_statistics=true
#spring.jpa.properties.hibernate.generate_statistics=false

#CACHE DE 2nd NIVEAU
# Pas de CACHE DE 2nd NIVEAU
spring.jpa.properties.cache.NoCacheProvider=org.hibernate.cache.NoCacheProvider
# AVEC de CACHE DE 2nd NIVEAU
#spring.jpa.properties.cache.provider_class=net.sf.ehcache.hibernate.EhCacheProvider
#spring.jpa.properties.cache.use_second_level_cache=true
#spring.jpa.properties.cache.use_query_cache=true
#net.sf.ehcache.configurationResourcename=ehcache.xml


# POOL DE CONNEXION C3P0
spring.jpa.properties.hibernate.c3p0.min_size = 5
spring.jpa.properties.hibernate.c3p0.max_size = 20
spring.jpa.properties.hibernate.c3p0.timeout = 500
spring.jpa.properties.hibernate.c3p0.max_statements = 50
spring.jpa.properties.hibernate.c3p0.idle_test_period = 2000
spring.jpa.properties.hibernate.c3p0.acquire_increment = 1


# *************************************
# STRATEGIE DE CONSERVATION DES TABLES
# Interrupteur général SPRING pour la création automatique du schéma par Hibernate
spring.jpa.generate-ddl=true
#spring.jpa.generate-ddl=false

# CREATE-DROP : SUPPRIME et RECREE le schéma à chaque démarrage. SUPPRIME le schéma après la fermeture de l'application. 
#spring.jpa.properties.hibernate.ddl-auto=create-drop

# CREATE : SUPPRIME et RECREE le schéma de base de données au démarrage. Ne SUPPRIME PAS le schéma après fermeture de l'application.
#PAR DEFAUT DANS SPRING.
# Idéal pour les TESTS
spring.jpa.properties.hibernate.ddl-auto=create

# UPDATE : Met à jour le schéma (sans destruction de données) si modification d'une Entity. Modifie les tables.
#spring.jpa.properties.hibernate.ddl-auto=update

# VALIDATE : VALIDE LE SCHEMA ET CONSERVE LES DONNEES. *** POUR LA PROD ****.
#spring.jpa.properties.hibernate.ddl-auto=validate

# NONE : empêche SPRING de créer automatiquement le SCHEMA.
#spring.jpa.properties.hibernate.ddl-auto=none
